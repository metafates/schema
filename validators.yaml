imports:
  - path: github.com/metafates/schema/constraint
    pkg: constraint

  - path: github.com/metafates/schema/validate/charset
    pkg: charset

validators:
  - name: Any
    desc: Any accepts any value of T.
    types:
      - name: T
        constraint: any

  - name: Zero
    desc: |
      Zero accepts all zero values.

      The zero value is:
      - 0 for numeric types,
      - false for the boolean type, and
      - "" (the empty string) for strings.

      See [NonZero].
    types:
      - name: T
        constraint: comparable

  - name: NonZero
    desc: |
      NonZero accepts all non-zero values.

      The zero value is:
      - 0 for numeric types,
      - false for the boolean type, and
      - "" (the empty string) for strings.

      See [Zero].
    types:
      - name: T
        constraint: comparable

  - name: Positive
    desc: |
      Positive accepts all positive real numbers excluding zero.

      See [Positive0] for zero including variant.
    types:
      - name: T
        constraint: constraint.Real

  - name: Negative
    desc: |
      Negative accepts all negative real numbers excluding zero.

      See [Negative0] for zero including variant.
    types:
      - name: T
        constraint: constraint.Real
        imports: github.com/metafates/schema/constraint

  - name: Positive0
    desc: |
      Positive0 accepts all positive real numbers including zero.

      See [Positive] for zero excluding variant.
    types:
      - name: T
        constraint: constraint.Real
    embed: Or[T, Positive[T], Zero[T]]

  - name: Negative0
    desc: |
      Negative0 accepts all negative real numbers including zero.

      See [Negative] for zero excluding variant.
    types:
      - name: T
        constraint: constraint.Real
    embed: Or[T, Negative[T], Zero[T]]

  - name: Even
    desc: Even accepts integers divisible by two.
    types:
      - name: T
        constraint: constraint.Integer

  - name: Odd
    desc: Odd accepts integers not divisible by two.
    types:
      - name: T
        constraint: constraint.Integer

  - name: Email
    desc: Email accepts a single RFC 5322 address, e.g. "Barry Gibbs <bg@example.com>".
    types:
      - name: T
        constraint: constraint.Text

  - name: URL
    desc: |
      URL accepts a single url.
      The url may be relative (a path, without a host) or absolute (starting with a scheme).

      See also [HTTPURL].
    types:
      - name: T
        constraint: constraint.Text

  - name: HTTPURL
    desc: |
      HTTPURL accepts a single http(s) url.

      See also [URL].
    types:
      - name: T
        constraint: constraint.Text

  - name: IP
    desc: |
      IP accepts an IP address.
      The address can be in dotted decimal ("192.0.2.1"),
      IPv6 ("2001:db8::68"), or IPv6 with a scoped addressing zone ("fe80::1cc0:3e8c:119f:c2e1%ens18").
    types:
      - name: T
        constraint: constraint.Text

  - name: IPV4
    desc: IPV4 accepts an IP V4 address (e.g. "192.0.2.1").
    types:
      - name: T
        constraint: constraint.Text

  - name: IPV6
    desc: |
      IPV6 accepts an IP V6 address, including IPv4-mapped IPv6 addresses.
      The address can be regular IPv6 ("2001:db8::68"), or IPv6 with
      a scoped addressing zone ("fe80::1cc0:3e8c:119f:c2e1%ens18").
    types:
      - name: T
        constraint: constraint.Text

  - name: MAC
    desc: MAC accepts an IEEE 802 MAC-48, EUI-48, EUI-64, or a 20-octet IP over InfiniBand link-layer address.
    types:
      - name: T
        constraint: constraint.Text

  - name: CIDR
    desc: |
      CIDR accepts CIDR notation IP address and prefix length,
      like "192.0.2.0/24" or "2001:db8::/32", as defined in RFC 4632 and RFC 4291.
    types:
      - name: T
        constraint: constraint.Text

  - name: Base64
    desc: Base64 accepts valid base64 encoded strings.
    types:
      - name: T
        constraint: constraint.Text

  - name: Charset0
    desc:
      Charset0 accepts (possibly empty) text which contains only runes acceptable by filter.

      See [Charset] for a non-empty variant.
    types:
      - name: T
        constraint: constraint.Text
      - name: F
        constraint: charset.Filter

  - name: Charset
    desc:
      Charset accepts non-empty text which contains only runes acceptable by filter.

      See also [Charset0].
    types:
      - name: T
        constraint: constraint.Text
      - name: F
        constraint: charset.Filter

  - name: Latitude
    desc: |
      Latitude accepts any number in the range [-90; 90].

      See also [Longitude].
    types:
      - name: T
        constraint: constraint.Real

  - name: Longitude
    desc: |
      Longitude accepts any number in the range [-180; 180].

      See also [Latitude].
    types:
      - name: T
        constraint: constraint.Real

  - name: InPast
    desc: |
      InFuture accepts any time after current timestamp.

      See also [InPast].
    types:
      - name: T
        constraint: constraint.Time

  - name: InFuture
    desc: |
      InFuture accepts any time after current timestamp.

      See also [InPast].
    types:
      - name: T
        constraint: constraint.Time

  - name: Unique
    desc: |
      Unique accepts a slice-like of unique values.

      See [UniqueSlice] for a slice shortcut.
    types:
      - name: S
        constraint: ~[]T
      - name: T
        constraint: comparable

  - name: UniqueSlice
    desc: |
      Unique accepts a slice of unique values.

      See [Unique] for a more generic version.
    types:
      - name: T
        constraint: comparable
    embed: Unique[[]T, T]
    aliased: Custom[[]T, validate.UniqueSlice[T]]

  - name: NonEmpty
    desc: |
      NonEmpty accepts a non-empty slice-like (len > 0).

      See [NonEmptySlice] for a slice shortcut.
    types:
      - name: S
        constraint: ~[]T
      - name: T
        constraint: any

  - name: NonEmptySlice
    desc: |
      NonEmptySlice accepts a non-empty slice (len > 0).

      See [NonEmpty] for a more generic version.
    types:
      - name: T
        constraint: comparable
    embed: NonEmpty[[]T, T]
    aliased: Custom[[]T, validate.NonEmptySlice[T]]

  - name: MIME
    desc: MIME accepts RFC 1521 mime type string.
    types:
      - name: T
        constraint: constraint.Text

  - name: UUID
    desc: |
      UUID accepts a properly formatted UUID in one of the following formats:
        - xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
        - urn:uuid:xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
        - xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
        - {xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}
    types:
      - name: T
        constraint: constraint.Text

  - name: JSON
    desc: JSON accepts valid json encoded text.
    types:
      - name: T
        constraint: constraint.Text

  - name: CountryAlpha2
    desc: CountryAlpha2 accepts case-insensitive ISO 3166 2-letter country code.
    types:
      - name: T
        constraint: constraint.Text

  - name: CountryAlpha3
    desc: CountryAlpha3 accepts case-insensitive ISO 3166 3-letter country code.
    types:
      - name: T
        constraint: constraint.Text

  - name: CountryAlpha
    desc: CountryAlpha accepts either [CountryAlpha2] or [CountryAlpha3].
    types:
      - name: T
        constraint: constraint.Text
    embed: Or[T, CountryAlpha2[T], CountryAlpha3[T]]

  - name: CurrencyAlpha
    desc: CurrencyAlpha accepts case-insensitive ISO 4217 alphabetic currency code.
    types:
      - name: T
        constraint: constraint.Text

  - name: LangAlpha2
    desc: LangAlpha2 accepts case-insensitive ISO 639 2-letter language code.
    types:
      - name: T
        constraint: constraint.Text

  - name: LangAlpha3
    desc: LangAlpha3 accepts case-insensitive ISO 639 3-letter language code.
    types:
      - name: T
        constraint: constraint.Text

  - name: LangAlpha
    desc: LangAlpha accepts either [LangAlpha2] or [LangAlpha3].
    types:
      - name: T
        constraint: constraint.Text
    embed: Or[T, LangAlpha2[T], LangAlpha3[T]]
